/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package uk.kukino.cq

import java.math.BigInteger


fun hexDump(bytes: ByteArray): String {
    return bytes.joinToString("") { String.format("%02x", it) }
}


fun main(rgs: Array<String>) {

    // https://kjur.github.io/jsrsasign/sample/sample-ecdsa.html
    // https://stackoverflow.com/questions/49825455/ecdsa-signature-java-vs-go

    KH.init()

    val kp = KH.getKeyPair()

    println(hexDump(kp.public.encoded))
    val publicKeyAgain = KH.bytesToPublicKey(kp.public.encoded)

//    println(kp.public)
    println("Public: " + hexDump(KH.asECPublicKey(kp.public).encoded))
    println("Public.X: " + KH.asECPublicKey(kp.public).w.affineX.toString(16))
    println("Public.Y: " + KH.asECPublicKey(kp.public).w.affineY.toString(16))
    println("------")


    println(hexDump(kp.private.encoded))
//    println(kp.private)
    println("Private: " + KH.asECPrivateKey(kp.private).s.toString(16))

    println("------")
    var signature = KH.sign(kp, "HOLA".toByteArray())
    println("Signature: " + BigInteger(signature).toString(16))
    println("Verify: " + KH.verify(KH.asECPublicKey(kp.public), "HOLA".toByteArray(), signature))
    println("Verify2: " + KH.verify(KH.asECPublicKey(publicKeyAgain), "HOLA".toByteArray(), signature))


}

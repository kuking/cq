/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package uk.kukino.cq

import org.bouncycastle.util.encoders.Base64
import org.bouncycastle.util.encoders.Hex
import java.math.BigInteger
import java.nio.charset.Charset
import java.security.spec.X509EncodedKeySpec


fun main(rgs: Array<String>) {

    // https://kjur.github.io/jsrsasign/sample/sample-ecdsa.html
    // https://stackoverflow.com/questions/49825455/ecdsa-signature-java-vs-go

    KH.init()

    val kp = KH.getKeyPair()

    println(Hex.toHexString(kp.public.encoded))
    val publicKeyAgain = KH.bytesToPublicKey(kp.public.encoded)

    val ecPublic = KH.asECPublicKey(kp.public)
    println("Public: " + Hex.toHexString(KH.asECPublicKey(kp.public).encoded))
    val b64public = Base64.toBase64String(X509EncodedKeySpec(kp.public.encoded).encoded)
    println("Base64: $b64public")
    val publicKeyAgain2 = KH.bytesToPublicKey(Base64.decode(b64public))

    println("------")

    println("Private: " + KH.asECPrivateKey(kp.private).s.toString(16))
    val b64private = Base64.toBase64String(X509EncodedKeySpec(kp.private.encoded).encoded)
    println("Base64: $b64private")

    val privateKeyAgain = KH.bytesToPrivateKey(Base64.decode(b64private))

    println("------")
    var signature = KH.sign(kp.private, "HOLA".toByteArray(Charset.defaultCharset()))
    println("Signature: " + BigInteger(signature).toString(16))
    println("Signature64: " + Base64.toBase64String(signature));
    println("Verify: " + KH.verify(KH.asECPublicKey(kp.public), "HOLA".toByteArray(), signature))
    println("Verify1: " + KH.verify(KH.asECPublicKey(publicKeyAgain), "HOLA".toByteArray(), signature))
    println("Verify2: " + KH.verify(KH.asECPublicKey(publicKeyAgain2), "HOLA".toByteArray(), signature))

    var signature2 = KH.sign(privateKeyAgain, "HOLA".toByteArray(Charset.defaultCharset()))
    println("Signature: " + BigInteger(signature2).toString(16))
    println("Signature64: " + Base64.toBase64String(signature2));
    println("Verify: " + KH.verify(KH.asECPublicKey(kp.public), "HOLA".toByteArray(), signature2))
    println("Verify1: " + KH.verify(KH.asECPublicKey(publicKeyAgain), "HOLA".toByteArray(), signature2))
    println("Verify2: " + KH.verify(KH.asECPublicKey(publicKeyAgain2), "HOLA".toByteArray(), signature2))


    // 30450221009e9fed19dac2dcd862506f7176bdad78a27707f1b0ac4cb2c5957db400912ce502207dc85cac3079007bab377d31d64ec0644e59c501f6469680131d1a7be741ed4e
    // 304402206e819b71c3c6463ef3f4e914574221aed3b1dc2a4db4f59a3b7330a4c0fe74ab022047899e783a0600cea3bfb9ca8858dee91085ca0497ac2a6280dcd45e3f802628
}
